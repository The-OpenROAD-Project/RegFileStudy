"""Study register file properities"""

module(
    name = "regfilestudy",
)

bazel_dep(name = "rules_jvm_external", version = "6.4")
bazel_dep(name = "rules_scala")
git_override(
    module_name = "rules_scala",
    commit = "1aced658083aac6c636fcc03b7cd3952a426eda7",
    remote = "https://github.com/bazelbuild/rules_scala",
)

bazel_dep(name = "rules_cc", version = "0.1.1")

## Fix the compiler version and avoid any local compiler
bazel_dep(name = "toolchains_llvm", version = "1.4.0")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "20.1.0",
)
use_repo(llvm, "llvm_toolchain")

register_toolchains(
    "@llvm_toolchain//:all",
)

bazel_dep(
    name = "rules_python",
    version = "1.3.0",
    # reduce namespace collisions by prefixing with regfilestudy
    repo_name = "regfilestudy_rules_python",
)

python = use_extension("@regfilestudy_rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    python_version = "3.13",
)

pip = use_extension("@regfilestudy_rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "regfilestudy-pip",
    python_version = "3.13",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "regfilestudy-pip")

bazel_dep(name = "bazel-orfs")

# To bump version, run: bazelisk run @bazel-orfs//:bump
git_override(
    module_name = "bazel-orfs",
    commit = "83cac6d8aa0317e4d7e0b345f634d8488342a07e",
    remote = "https://github.com/The-OpenROAD-Project/bazel-orfs.git",
)

orfs = use_extension("@bazel-orfs//:extension.bzl", "orfs_repositories")

# To bump version, run: bazelisk run @bazel-orfs//:bump
orfs.default(
    # Official image https://hub.docker.com/r/openroad/orfs/tags
    image = "docker.io/openroad/orfs:v3.0-3611-gb9297250",
    sha256 = "c2c4165d0cafbb12bf5b69c8f41f6f07c9fe840b90f05800667d8583f083b2a9",
)
use_repo(orfs, "com_github_nixos_patchelf_download")
use_repo(orfs, "docker_orfs")

SCALA_VERSION = "2.13.16"

SCALA_VERSION_SHORT = SCALA_VERSION.rpartition(".")[0]

scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(
    scala_version = SCALA_VERSION,
)
use_repo(scala_config, "rules_scala_config")

scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)
scala_deps.settings(
    fetch_sources = True,
)
scala_deps.scala()
scala_deps.scalatest()

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "regfilestudy_maven",
    artifacts = [
        "org.chipsalliance:chisel_2.13:7.0.0-RC1+22-2cb90ea2-SNAPSHOT",
        "org.chipsalliance:chisel-plugin_2.13.16:7.0.0-RC1+22-2cb90ea2-SNAPSHOT",
        "org.typelevel:cats-core_2.13:2.13.0",
        "io.circe:circe-core_2.13:0.14.13",
        "io.circe:circe-generic_2.13:0.14.13",
        "io.circe:circe-yaml_2.13:1.15.0",
        "com.chuusai:shapeless_2.13:2.3.13",
    ],
    repositories = [
        "https://s01.oss.sonatype.org/content/repositories/snapshots",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "regfilestudy_maven")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "circt",
    build_file_content = """
exports_files(glob(["bin/*"]), visibility = ["//visibility:public"])
""",
    sha256 = "b1b57d1b76ceba2bb37229dab53839d5db6d61394149708c71f6265565991ce6",
    strip_prefix = "firtool-1.108.0",
    url = "https://github.com/llvm/circt/releases/download/firtool-1.108.0/firrtl-bin-linux-x64.tar.gz",
)

http_archive(
    name = "berkeley_hardfloat",
    build_file = "//multiplier:hardfloat.BUILD.bazel",
    sha256 = "84e09620e9fb902bc63dadd5c755562ce6fea9f18dad9bc52eb98a952aeefaa5",
    strip_prefix = "berkeley-hardfloat-109ac38f253184dbb67223cac0c3ae5408d82d7a",
    url = "https://github.com/Pinata-Consulting/berkeley-hardfloat/archive/109ac38f253184dbb67223cac0c3ae5408d82d7a.zip",
)
